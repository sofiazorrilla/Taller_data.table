---
title: "Importar y exportar datos"
---

## Crear un objeto data.table

Un objeto data.table se puede definir, por ejemplo:

```{r}
library(data.table)

DT = data.table(
  ID = c("b","b","b","a","a","c"),
  a = 1:6,
  b = 7:12,
  c = 13:18
)

DT
```

<br>

::: {.callout-note collapse="true"}
## Ejercicio

Genera un objeto data.table en el que la primera columna sea un id de secuencia y la segunda sea una secuencia (aleatoria) de tamaño 300 caracteres
:::

::: {.callout-note collapse="true"}
## Respuesta

```{r}
secuencias <- data.table(
                id = seq(1,10000), 
                sequencia = sapply(seq(1, 10000), function(x) paste(sample(c("A", "T", "C", "G"), 100, replace = TRUE), collapse = "")))

head(secuencias)
```
:::


<br>

## Importar y exportar datos de archivos

Las funciones para importar (`fread`) y exportar (`fwrite`) tienen las siguientes opciones principales:

- `x`: el objeto que queremos exportar.

- `file`: ruta para escribir/leer el archivo.

- `sep`: el delimitador entre columnas.

- `dec`: el separador decimal.

- `dateTimeAs`: formato en el que guardar objetos de fecha. Por defecto es “ISO”.


**Ejemplo**: Por ejemplo, podemos importar la tabla de XX que tiene ZZ registros. 

```{r}
library(data.table)

data = fread("https://raw.githubusercontent.com/Rdatatable/data.table/master/vignettes/flights14.csv")

data
```

<br>

::: {.callout-note collapse="true"}
## Ejercicio

Importa la tabla XX que encontrarás en la siguiente liga. 

¿Cuántas filas y columnas tiene?

:::

::: {.callout-note collapse="true"}
## Respuesta



:::

<br>

## Exportar

**Ejemplo**: podemos escribir la tabla DT que creamos anteriormente:

```{r}
fwrite(DT, "data/testDT.csv", sep = ",")
```

<br>

::: {.callout-note collapse="true"}
## Ejercicio

Exporta la tabla que generaste en el ejercicio 1 un archivo csv.

:::


::: {.callout-note collapse="true"}
## Respuesta

```{r}
#| eval: false

secuencias <- data.table(
                id = seq(1,10000), 
                sequencia = sapply(seq(1, 10000), function(x) paste(sample(c("A", "T", "C", "G"), 100, replace = TRUE), collapse = "")))

fwrite(secuencias, "data/secuencias.csv", sep = ",")
```

:::

<br>

## Velocidad dplyr vs data.table

```{r}

library(rbenchmark)

benchmark("r base" = {
            read.csv("data/flights14.csv")
          },
          "data.table" = {
            fread("data/flights14.csv")
          },
          replications = 10,
          columns = c("test", "replications", "elapsed",
                      "relative", "user.self", "sys.self"))

```

::: {.callout-note collapse="true"}
## Ejercicio opcional

Si quieres, puedes revisar el tiempo que te toma cargar la base de datos XX utilizando read.csv y fread. Utiliza el comando de benchmark de la paquetería rbenchmark para contar el tiempo. Nota: en el número de réplicas puedes poner una o dos porque si no te vas a tardar mucho. 

:::

<br>

## data.frame - data.table

El objeto de data.table es un objeto basado en un data.frame, por lo tanto es compatible con las funciones de R base que trabajan con data.frame. 

```{r}
str(data)
```

Sin embargo, los objetos se pueden cambiar de clase. Por ejemplo: 

```{r}
library(magrittr)

as.data.frame(DT) %>% class()

as.data.frame(DT) %>% as.data.table() %>% class()
```




